const crypto = require('crypto');

// Bob's private and public key
const bobPrivateKey = crypto.createPrivateKey(`-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDJhBP15dZaq1Sz
JYCFYHHk/ba3QfaeuY8CZBpTy3pyRDUvwfyv7ECPrvFUX/nHw3bjHDy4xgCmx+BH
7KD2Qkh6Ot+9iQhV73Nu5BLXZORSJBlN1rIDLbM9CcbPkE8YOUOxEFzUz/q5PFUQ
LzXIQlFKvKF1Fycz+mEVrcPJ2tF9yZriyHb0CnCbMqvB5fIfsHaYXgUGanPKXT2H
zDTlS9wJMihyi5uCXI3eS6b7olDZ39BtA9i2fvbcuK+O0NqOMtHdcGq9uV9UsFdQ
cEwZpEjZmT2MMNBOHvsRSyKyGMcllzOEV8cjwQMQbVvMEgzWuhnea0+Un8+qFsnp
hlKK6P+tAgMBAAECggEAHjSph0jRxhp7YjUDXDq2J8RuAG8nR+h5irq1hYzxCDK4
JDX4KeiITuFCtEqEltByQB2p7mpji5xXPoC2KeOKmKO9iNwC/1qam2sddeLeJH/b
uSKu4TIW9VXDUraHXJKs1lwlBhM8ukpUV84zyhZCuCipLPNxAWYM6mJ3AAlIMInl
CpAex2XKx4Lh167tjZAkP8SXytF5wNB3d0HhVB7SR04AQ8cNWY4V5Y1UPm1BMQwA
af6954bUSIw/bFvGbNhZFueguljDVgAXzmyukK7EGnN7qNkaez9U5X1ZpapyNXA9
OAF91OC6xZEjtuewgS2DS6G3TUuIy1So01UDxS4ZkwKBgQDpuUV5p1tZby/KIJ/8
PNz61IP3PI6A2Z0XG/Fub98QB42dTFERf3uJwz9s+q+X+O7resPg0uqVXyba2Oj6
SLN5hCLzlSoldl/A/zRWFC4Cz7RVpa+c33VClxzOy7CGp0SPVdWHtr5WgHNByi5E
I6vM4obHYR9rS2d/Giglr8968wKBgQDcuPRauVokumy6Sm84ZCttfI5LxkGEDDmf
DAlAPKLtEr5rVf0CGxPLjU1AYbjJrfMcRYvliSiTYrAgWMnSUDAcjDR/HtOJl40D
IVYZdBCbMmpHIL3pel5nUXSy92IDis6QvAxHT/cMJIIMjy0lJo2atDo+tjj48PKM
hTtAkK0C3wKBgQDB14kJdoXKzO5jw18swgW8epjganb94n3o9qHsKBhmoP0QooTx
8DszbJ2j8t3DOxBceLsQMZ2hOQNuqku/mKBRfgfG4cXMwDp2RLLRWXc3mbBFAF9/
yczk55Na55CGfR/diSDJqASAlZQB0n9AwBzylkWWArUeNbGmtrjpWMDJhQKBgDvM
E888ZfKLWweBQO57HNTVqMtYk8lNcpLnNN5lTxKBQHtd2WSnp04/Is2ta92ftbxU
DxmJdiev1d19kHfc55vkVBiYZmDhYP+XGXdd3V3eY7KPaUQGteqxw7b0lGY3Rc0q
VP1A6cItZdo3M9jbwANIjnsM7RRsWpm9Qpc0WtrrAoGAZthxJJ7CH6rOMkjvacwA
hzvlX27KPAdLj85Dbm1R6A8MbTnKUx9/GQYmOQpRJkQ+YXJBW2vj5kOh0LOSoJdG
IEDDCTeZk2nyeZZLLWxSmUEylnOHCj57xF9PP2lZK6VTuV8372yUEAeVRTajKjhi
IiqCtV+oz5Rn4iLAb154R6M=
-----END PRIVATE KEY-----`);

const bobPublicKey = crypto.createPublicKey(`-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyYQT9eXWWqtUsyWAhWBx
5P22t0H2nrmPAmQaU8t6ckQ1L8H8r+xAj67xVF/5x8N24xw8uMYApsfgR+yg9kJI
ejrfvYkIVe9zbuQS12TkUiQZTdayAy2zPQnGz5BPGDlDsRBc1M/6uTxVEC81yEJR
SryhdRcnM/phFa3DydrRfcma4sh29ApwmzKrweXyH7B2mF4FBmpzyl09h8w05Uvc
CTIocoubglyN3kum+6JQ2d/QbQPYtn723LivjtDajjLR3XBqvblfVLBXUHBMGaRI
2Zk9jDDQTh77EUsishjHJZczhFfHI8EDEG1bzBIM1roZ3mtPlJ/PqhbJ6YZSiuj/
rQIDAQAB
-----END PUBLIC KEY-----`);

// Alice's public key for verification
const alicePublicKey = crypto.createPublicKey(`-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAygmpbAkmkssOmYXDuqNJ
n1vQI8FTBwcgX62iEdiA7yAwkUpSWH/mnexBXoIoPicgxc45ZM/R7/V5Y7vptEFW
E3TiMDawPrE9z3uJYgXcPcw9d1Uh7sWExKD1BMdPUyi6AIxdE3i3UD0ijXvdoS6/
4hcyN94kqgGAzvqVYsl2DFzNgQvR5opqKep8tiGXu49JhMzpv75PeTWYlanEtGP1
HxidvFxOS7uOV/4K2xBpHqgZ6TJDtKJ04okCNIdfIb/gsIRco8WnLZhsqkBG64CH
/F9t06PS7iQbdyNQvuUbyKeBtStEovPec8gsmET8LIVljvQ8renXQ6LREUlOQQau
PwIDAQAB
-----END PUBLIC KEY-----`);


const ciphertextHex = "846ae125292e212d0897beb745d623ad969c313a653cf5f2637796d1738d6baedb2558e6c54ab7ea37266f264060775a2e55909fd097154317771cfdd4be6b8e0cd7973658f41365c68b9c523712413f8e08958a3d67972c0eb9ed0a73c00261f23bfa9f23c26054b228c23869b792b4ebec52d3023abc8125abb48c6e8bdb9d661ecf6779d62663677dad0824e8f5514d62ff8a346d4753b9bf8f5c5ca14a45e738a54bc6d08e5d70633ce1ef4fb48f0a595f0eb89630898dfd8d8761fc5b9ad822d0942c8d74efc6dc2db7da7cee2554ccf0a867b53fadb701ce3bce0fc03466afb767ffaf36eab1b343b44810a33c41b23076f4c71dc42d9e65df0cb79cba";
const ciphertext = Buffer.from(ciphertextHex, "hex");

const recoveredPlaintext = crypto.privateDecrypt(bobPrivateKey, ciphertext);
console. log("Recovered Plaintext:", recoveredPlaintext.toString ("utf8"));

const signatureHex = "0d0174d74c0f66369fc556affd76b6e930eb301e5208fe2400102dec9bf22ef58919d64bdf449e9dd74121f0b6c701d0e71f2a3770508a4cf694af7497a5fa479f90dd8d00502423c52cf796df2e66a219203bb2151400763174aedfd1aaad519114f5ab08345a7b70f1b2ced2b42399632da947250d0a649ebf890b7627d9d8bd09e74063966db1405ca2d6bb9c9b066c8c0306009ec45d9d836b760f7c954aa708ee2082c153bc74660f45122eaeef2f433c472c945a2bd574cc8383876f2ac71ddaa18b7fa223df63135f8e00c3e690d61d2369e95b2bf28468826cf38c9785819f911f020e12a5c782cabd22a9f650fa6ea29fe2bb269ecd011c0e811cc5";
const signature = Buffer.from(signatureHex, "hex");

const isValid = crypto.verify("sha256", recoveredPlaintext, alicePublicKey, signature);
console. log ("RSA signature verified:", isValid);